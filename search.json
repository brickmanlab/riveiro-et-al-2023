[
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "riveiro_et_al_2023",
    "section": "",
    "text": "Transcription Factor Co-Expression Mediates Lineage Priming for Embryonic and Extra-Embryonic Differentiation"
  },
  {
    "objectID": "notebooks/01_thompson_comparison.html",
    "href": "notebooks/01_thompson_comparison.html",
    "title": "01 thompson comparison",
    "section": "",
    "text": "Code\nlibrary(cowplot)\nlibrary(tidyverse)\n#library(matrixStats)\n#library(DiffBind)\n#library(RColorBrewer)\n#library(reshape2)\n#library(ChIPseeker)"
  },
  {
    "objectID": "notebooks/01_thompson_comparison.html#overlap-with-albas-sox2-gata6-cobound-peaks-in-dp-kosr-cells",
    "href": "notebooks/01_thompson_comparison.html#overlap-with-albas-sox2-gata6-cobound-peaks-in-dp-kosr-cells",
    "title": "01 thompson comparison",
    "section": "1.1 Overlap with Alba’s Sox2-Gata6 cobound peaks in DP KOSR cells",
    "text": "1.1 Overlap with Alba’s Sox2-Gata6 cobound peaks in DP KOSR cells\nVenn diagrams were produced using the intervene package. See helper script 01_intervene.sh in the scripts folder.\n\n\nCode\nknitr::include_graphics(\"../results/01_intervene/alba_cobound_sox2_gata6_thompson_2h_chip2_nanog/Intervene_venn_1.png\")\n\n\n\n\n\n\n\nFigure 1: Overlap between Alba’s KOSR DP Sox2-Gata6 cobound peaks and Thompson 2h rechip Nanog-Gata6 peaks. 85% of KOSR DP Sox2-Gata6 cobound peaks in Thompson rechip peakset\n\n\n\n\n\n\n\n\nCode\nknitr::include_graphics(\"../results/01_intervene/alba_KOSR_DP_gata6_thompson_2h_chip2_nanog/Intervene_venn_3.png\")\n\n\n\n\n\n\n\nFigure 2: Overlap between Alba’s KOSR DP Gata6 peaks and Thompson 2h rechip Nanog-Gata6 peaks. 70% of KOSR DP Gata6 peaks in Thompson rechip peakset\n\n\n\n\n\n\n\n\nCode\nknitr::include_graphics(\"../results/01_intervene/thompson_2h_FLAG_chip1_gata6_thompson_2h_chip2_nanog/Intervene_venn_4.png\")\n\n\n\n\n\n\n\nFigure 3: Overlap between Thompson 2h chip1 Gata6 peaks and Thompson 2h rechip Nanog-Gata6 peaks. 52% overlap"
  },
  {
    "objectID": "notebooks/01_thompson_comparison.html#re-chip-peak-enrichment-at-albas-pluri-common-and-pre-enhancers",
    "href": "notebooks/01_thompson_comparison.html#re-chip-peak-enrichment-at-albas-pluri-common-and-pre-enhancers",
    "title": "01 thompson comparison",
    "section": "1.2 Re-chip peak enrichment at Alba’s pluri, common, and PrE enhancers",
    "text": "1.2 Re-chip peak enrichment at Alba’s pluri, common, and PrE enhancers\nThis heatmap was produced using deeptools. See helper scripts 01_deeptools_matrix_rechip_alba_enhancers.sh and 01_deeptools_plot_rechip_alba_enhancers.sh in scripts folder.\n\n\nCode\nknitr::include_graphics(\"../results/01_thompson_rechip/deeptools/01_Gata6_Nanog_rechip_on_pluri_common_nEnd.png\")\n\n\n\n\n\n\n\nFigure 4: Some enrichment of re-chip peaks at pluri, common, and PrE enhancers defined by Alba"
  },
  {
    "objectID": "notebooks/01_thompson_comparison.html#motif-analysis-rechip",
    "href": "notebooks/01_thompson_comparison.html#motif-analysis-rechip",
    "title": "01 thompson comparison",
    "section": "1.3 Motif analysis rechip",
    "text": "1.3 Motif analysis rechip\nHomer results under riveiro_et_al_2023/results/01_thompson_rechip/motif_analysis/. See helper script 01_homer_rechip_alba_enhancers.sh   Both 2h chip1 FLAG Gata6 and 2h re-CHIP Nanog have Gata motifs at top. More Sox motifs in top results for 2h Nanog re-CHIP, and Nanog motifs in top."
  },
  {
    "objectID": "notebooks/01_thompson_comparison.html#overlap-with-albas-cobound-peaks",
    "href": "notebooks/01_thompson_comparison.html#overlap-with-albas-cobound-peaks",
    "title": "01 thompson comparison",
    "section": "2.1 Overlap with Alba’s cobound peaks",
    "text": "2.1 Overlap with Alba’s cobound peaks\n\n\nCode\nknitr::include_graphics(\"../results/01_intervene/alba_cobound_sox2_gata6_thompson_blasto_gata6_nanog/Intervene_venn2.png\")\n\n\n\n\n\n\n\nFigure 5: Overlap between Alba’s KOSR DP cobound Sox2-Gata6 peaks and Thompson cobound Gata6-Nanog peaks in E3.5 blastocysts. 48% of Alba’s cobound peaks overlap with Thompson cobound peaks in blastocysts."
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html",
    "href": "notebooks/10_re-preprocessing-v2.html",
    "title": "10 - Re-running preprocessing",
    "section": "",
    "text": "This notebook is to address the reviewer’s comments in regards to missing Sox2 expression in the scRNAseq.\n%matplotlib inline\n\nimport glob\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n\nfrom matplotlib.pyplot import rc_context\nfrom numba.core.errors import NumbaDeprecationWarning, NumbaPendingDeprecationWarning\nimport warnings\n\n\nwarnings.simplefilter('ignore', category=NumbaDeprecationWarning)\nwarnings.simplefilter('ignore', category=NumbaPendingDeprecationWarning)"
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html#original-analysis",
    "href": "notebooks/10_re-preprocessing-v2.html#original-analysis",
    "title": "10 - Re-running preprocessing",
    "section": "1 0. Original analysis",
    "text": "1 0. Original analysis\n\nadata_orig = sc.read(\"../data/processed/01_dataset_MLA.h5ad\")\nadata_orig.obs.seurat_clusters = adata_orig.obs.seurat_clusters.astype('category')\n\n\nsc.pl.umap(adata_orig, color=['Stage', 'seurat_clusters', 'Phase'], ncols=3, frameon=False)"
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html#original-sox2-expression-bowtie2",
    "href": "notebooks/10_re-preprocessing-v2.html#original-sox2-expression-bowtie2",
    "title": "10 - Re-running preprocessing",
    "section": "2 1. Original Sox2 expression (bowtie2)",
    "text": "2 1. Original Sox2 expression (bowtie2)\n\noriginal = sc.concat([\n    sc.read_text(amp).T \n    for amp in glob.glob(\"../data/assays/SCR_20221006/processed/marsseq_16082023/output/umi.tab/*.txt\")\n])\n\n\nsc.pp.calculate_qc_metrics(original, inplace=True)\n\n\noriginal[:, 'Sox2'].var"
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html#re-aligned-starsolo",
    "href": "notebooks/10_re-preprocessing-v2.html#re-aligned-starsolo",
    "title": "10 - Re-running preprocessing",
    "section": "3 2. Re-aligned (StarSolo)",
    "text": "3 2. Re-aligned (StarSolo)\n\nrealigned = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\n\nsc.pp.calculate_qc_metrics(realigned, inplace=True)\n\n\nrealigned[:, 'Sox2'].var"
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html#re-aligned-with-egfp-starsolo",
    "href": "notebooks/10_re-preprocessing-v2.html#re-aligned-with-egfp-starsolo",
    "title": "10 - Re-running preprocessing",
    "section": "4 3. Re-aligned with eGFP (StarSolo)",
    "text": "4 3. Re-aligned with eGFP (StarSolo)\nIt could be since MARSseq is a 3’ sequencing, that most of the sequence is eGFP tag and not the SOX2 sequence itself.\nTo solve this issue, we introduce eGFP sequence to the reference and compare the SOX2 vs SOX2_eGFP alignemnt. If it’s a sequencing issue we should see “recovered” counts from eGFP pseudogene.\n\nrealigned_eGFP = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq_eGFP/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\n\nsc.pp.calculate_qc_metrics(realigned_eGFP, inplace=True)\n\n\nrealigned_eGFP[:, 'Sox2'].var\n\n\nsc.pp.normalize_total(realigned_eGFP)\nsc.pp.log1p(realigned_eGFP)\n\n\ndf = realigned_eGFP[:, ['Sox2', 'eGFP_Sox2_gene']].to_df()\n\nfig, ax = plt.subplots(1, 2, sharey=True, sharex=True, figsize=[8, 3], constrained_layout=True)\n_ = ax[0].hist(df['Sox2'], label='Sox2')\n_ = ax[1].hist(df['eGFP_Sox2_gene'], label='Sox2 (eGFP)', color='orange')\n\n_ = ax[0].legend()\n_ = ax[1].legend()\n\n_ = fig.supylabel('Counts')\n_ = fig.supxlabel('Normalized & log-transformed gene expression')\n\nWe can see that the eGFP couldn’t be detected, however the Sox2 expression has been recovered with StarSolo as already shown in Section 2."
  },
  {
    "objectID": "notebooks/10_re-preprocessing-v2.html#downstream-re-analysis-egfp",
    "href": "notebooks/10_re-preprocessing-v2.html#downstream-re-analysis-egfp",
    "title": "10 - Re-running preprocessing",
    "section": "5 4. Downstream re-analysis (eGFP)",
    "text": "5 4. Downstream re-analysis (eGFP)\n\n# original\n# adata = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq_eGFP/SB2/velocity/SB2.Solo.out/Gene/raw/\")\nadata = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\nmeta = pd.read_csv(\"../data/processed/00_metadata.csv\", index_col=1)\nmeta['celltag'] = meta[['Pool_barcode', 'Cell_barcode']].agg(''.join, axis=1)\nmeta = meta.reset_index().set_index('celltag')\nmeta = meta[[\n        'Well_ID', 'Well_coordinates', 'plate_ID',\n        'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode',\n        'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup',\n        'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean']]\n\ncommon_cells = adata.obs_names.intersection(meta.index)\nadata = adata[common_cells].copy()\nadata.obs = meta.loc[common_cells].copy()\n\n/tmp/ipykernel_2982839/2892087162.py:5: DtypeWarning: Columns (22,32,70,71,72,79,90,99,113,119,134,143,152,153,162,165,166,193,194,201,204,213,233,234,245,253,256,264,268,275,276,283,303,304,315,317,318,398,416,417,420,477,479,552,634,642,643,646,666,683,731,866,877,1041,1043,1062,1093,1094,1132,1134,1184,1186,1192,1254,1286,1295) have mixed types. Specify dtype option on import or set low_memory=False.\n  meta = pd.read_csv(\"../data/processed/00_metadata.csv\", index_col=1)\n\n\n\nadata\n\nAnnData object with n_obs × n_vars = 1536 × 55359\n    obs: 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean'\n    var: 'gene_ids', 'feature_types'\n\n\n\nadata.obs.plate_ID = adata.obs.plate_ID.astype('category')\n\n# Remove Zero\nadata = adata[adata.obs.Stage != 'Zero'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_double'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_GFP'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_cherry'].copy()\n\n# Actually 2C, keep it\n# cells_2C = ['AGTCTCGTGAG', 'CATGCATGGAT', 'CTACCAATGCG', 'CTACTCGATAC', 'TGATGAGCTAG', 'TGATTACGAGG']\n\n# Remove ERCC cells\nadata = adata[:, ~adata.var_names.str.startswith('ERCC-')]\n\n\nadata.var['mt'] = adata.var_names.str.startswith('mt-')\nadata.var['ercc'] = adata.var_names.str.startswith('ERCC-')\nadata.var['ribo'] = adata.var_names.str.startswith(('Rpl', 'Rps'))\n\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt', 'ercc', 'ribo'], percent_top=None, log1p=False, inplace=True)\n\n/tmp/ipykernel_2982839/3810762444.py:1: ImplicitModificationWarning: Trying to modify attribute `.var` of view, initializing view as actual.\n  adata.var['mt'] = adata.var_names.str.startswith('mt-')\n\n\n\nfig, ax = plt.subplots(1, 3, figsize=(20, 5))\nsns.violinplot(y=adata.obs['n_genes_by_counts'], orient='v', ax=ax[0])\nsns.violinplot(y=adata.obs['total_counts'], orient='v', ax=ax[1])\nsns.violinplot(y=adata.obs['pct_counts_mt'], orient='v', ax=ax[2])\n\n&lt;AxesSubplot:ylabel='pct_counts_mt'&gt;\n\n\n\n\n\n\nfig, ax = plt.subplots(1,3, figsize=(20, 5), sharey=True)\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[0], data=adata.obs, hue='Stage')\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[1], hue='pct_counts_mt', data=adata.obs)\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[2], hue='pct_counts_ribo', data=adata.obs)\n\n&lt;AxesSubplot:xlabel='total_counts', ylabel='n_genes_by_counts'&gt;\n\n\n\n\n\n\nmin_cells, max_cells = 1000, 45e3\nmin_genes, max_genes = 1400, 7_500\n\np = sns.jointplot(x='total_counts', y='n_genes_by_counts', data=adata.obs, marginal_kws=dict(bins=100), height=10)\n# min\np.ax_joint.axvline(x=min_cells, color='red')\np.ax_joint.axhline(y=min_genes, color='red')\n\n# max\np.ax_joint.axvline(x=max_cells, color='green')\np.ax_joint.axhline(y=max_genes, color='green')\n\n&lt;matplotlib.lines.Line2D at 0x14b75e477220&gt;\n\n\n\n\n\n\nprint(f'Before filtering: {adata.shape}')\n\nsc.pp.filter_cells(adata, min_genes=min_genes)\nsc.pp.filter_cells(adata, min_counts=min_cells)\nsc.pp.filter_cells(adata, max_counts=max_cells)\nsc.pp.filter_cells(adata, max_genes=max_genes)\n\n# adata = adata[adata.obs.pct_counts_mt &lt; 10].copy()\n\nsc.pp.filter_genes(adata, min_cells=3)\nprint(f'After filtering: {adata.shape}')\n\nBefore filtering: (1192, 55359)\nAfter filtering: (1139, 21590)\n\n\n\nfig, ax = plt.subplots(1,4, figsize=(25, 5))\nsns.violinplot(y=adata.obs['n_genes_by_counts'], orient='v', ax=ax[0])\nsns.violinplot(y=adata.obs['total_counts'], orient='v', ax=ax[1])\nsns.violinplot(y=adata.obs['pct_counts_mt'], orient='v', ax=ax[2])\nsns.violinplot(y=adata.obs['pct_counts_ribo'], orient='v', ax=ax[3])\n\n&lt;AxesSubplot:ylabel='pct_counts_ribo'&gt;\n\n\n\n\n\n\nadata.layers['counts'] = adata.X.copy()\n\nsc.pp.normalize_total(adata)\nsc.pp.log1p(adata)\nadata.raw = adata\n\n\nsc.pp.highly_variable_genes(adata, flavor=\"seurat\", batch_key=\"Amp_batch_ID\")\n\n# this works\n# sc.pp.highly_variable_genes(adata, flavor=\"seurat\", batch_key=\"plate_ID\")\n\n# sc.pp.highly_variable_genes(adata, flavor=\"seurat\")\nsc.pl.highly_variable_genes(adata)\n\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/preprocessing/_highly_variable_genes.py:478: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  hvg = hvg.append(missing_hvg, ignore_index=True)\n\n\n\n\n\n\nadata[:, adata.var.highly_variable]\n\nView of AnnData object with n_obs × n_vars = 1139 × 2262\n    obs: 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'n_genes', 'n_counts'\n    var: 'gene_ids', 'feature_types', 'mt', 'ercc', 'ribo', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection'\n    uns: 'log1p', 'hvg'\n    layers: 'counts'\n\n\n\nsc.pp.scale(adata)\n\n\nsc.tl.pca(adata)\nsc.pl.pca_variance_ratio(adata, log=True)\n\n\n\n\n\n# sc.pp.neighbors(adata, n_neighbors=10, n_pcs=15)\nsc.pp.neighbors(adata)\nsc.tl.leiden(adata)\nsc.tl.umap(adata)\n\n\n# Verify 2C cells\nsc.pl.pca(adata, color=[\"Stage\", \"leiden\", 'Zscan4d'], ncols=2, wspace=0.25)\n\n\n\n\n\nimport urllib.request, json \n\ncc_url = \"https://github.com/brickmanlab/project-template/raw/master/%7B%7B%20cookiecutter.project_name%20%7D%7D/data/external/mouse_cell_cycle_genes.json\"\nwith urllib.request.urlopen(cc_url) as url:\n    cc = json.load(url)\n\nsc.tl.score_genes_cell_cycle(adata, s_genes=cc['s'], g2m_genes=cc['g2m'], use_raw=False)\n\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/tools/_score_genes.py:151: FutureWarning: Passing a set as an indexer is deprecated and will raise in a future version. Use a list instead.\n  for cut in np.unique(obs_cut.loc[gene_list]):\n/projects/dan1/people/fdb589/envs/scvi-0.17.1/lib/python3.8/site-packages/scanpy/tools/_score_genes.py:151: FutureWarning: Passing a set as an indexer is deprecated and will raise in a future version. Use a list instead.\n  for cut in np.unique(obs_cut.loc[gene_list]):\n\n\n\ncc_composition = adata.obs.groupby(['Stage', 'phase']).apply(len).unstack().fillna(0)\ncc_composition /= cc_composition.sum(axis=1)[:, np.newaxis]\ncc_composition *= 100\n\ncc_composition.plot(kind='bar', stacked=True)\nplt.gca().legend(title='CC phase', bbox_to_anchor=(0.99, 1.02), loc='upper left', frameon=False)\nplt.gca().spines[['right', 'top']].set_visible(False)\n_ = plt.xticks(rotation=45, ha='right')\n_ = plt.ylabel('% Cell cycle')\n_ = plt.xlabel('')\n\n/tmp/ipykernel_2982839/2422794942.py:2: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.\n  cc_composition /= cc_composition.sum(axis=1)[:, np.newaxis]\n\n\n\n\n\n\nadata\n\nAnnData object with n_obs × n_vars = 1139 × 21590\n    obs: 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'n_genes', 'n_counts', 'leiden', 'S_score', 'G2M_score', 'phase'\n    var: 'gene_ids', 'feature_types', 'mt', 'ercc', 'ribo', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n    uns: 'log1p', 'hvg', 'pca', 'neighbors', 'leiden', 'umap', 'Stage_colors', 'leiden_colors'\n    obsm: 'X_pca', 'X_umap'\n    varm: 'PCs'\n    layers: 'counts'\n    obsp: 'distances', 'connectivities'\n\n\n\nsc.pl.umap(adata, color=['Stage', 'Amp_batch_ID', 'plate_ID', 'Zscan4d'], ncols=2, frameon=False)\n\n\n\n\n\nsc.tl.leiden(adata, resolution=0.4)\n\n\nsc.pl.umap(adata, color=['Stage', 'Amp_batch_ID', 'plate_ID', 'leiden'], ncols=2, frameon=False)\n\n\n\n\n\n5.1 Find co-expressing genes\nWe define co-expression where Sox2 ang Gata6 have their \\(expr &gt; 1.5\\)\n\nsc.pl.scatter(adata, x='Sox2', y='Gata6', color='Stage', use_raw=True)\n\n\n\n\n\ndf = pd.DataFrame(\n    adata.raw[:, ['Sox2', 'Gata6']].X.A,\n    index=adata.obs_names,\n    columns=['Sox2', 'Gata6']\n)\n\nadata.obs['S2G6+'] = df.sum(axis=1) &gt; 1.5\nadata.obs['S2G6+'] = adata.obs['S2G6+'].astype('category')\nadata.obs['S2G6+'] = adata.obs['S2G6+'].cat.rename_categories(['None', 'Co-expressed'])\n\n\nsc.pl.umap(adata, color=['Stage', 'leiden', 'Sox2', 'Gata6', 'Pou5f1', 'S2G6+',\n                         'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'pct_counts_ribo'], ncols=3, frameon=False)\n\n\n\n\n\ndf = adata.obs.groupby(['Stage', 'S2G6+']).apply(len).unstack()\ndf = df / df.sum(axis=1).values[:, np.newaxis]\ndf *= 100\n\n_ = df.plot.barh(title='% of SOX2+ and Gata6+', stacked=True)\n\n\n\n\n\nsc.pl.violin(adata, ['Sox2', 'Gata6'], groupby='Stage')\n\n\n\n\n\nsc.pl.dotplot(adata,\n              ['Zscan4d', 'Tbx3', 'Dppa3', 'Fbxo15', 'Hhex', 'Gata6', 'Pdgfra', 'Zfp42', 'Klf4', 'Fgf4', 'Otx2', 'Etv5'], \n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n\n\n\n\nsc.tl.rank_genes_groups(adata, groupby='Stage')\n\nWARNING: Default of the method has been changed to 't-test' from 't-test_overestim_var'\n\n\n\nmarkers = sc.get.rank_genes_groups_df(adata, group=None).query('logfoldchanges &gt; 1.5 & pvals_adj &lt; 0.05')\nmarkers.to_csv(\"../results/10_Stage_markers_v2.csv\")\nmarkers\n\n\n\n\n\n\n\n\ngroup\nnames\nscores\nlogfoldchanges\npvals\npvals_adj\n\n\n\n\n0\n2iLIF\nMt1\n30.182755\n3.066576\n8.542602e-84\n6.147826e-80\n\n\n1\n2iLIF\nMt2\n28.141783\n3.261517\n2.455703e-76\n1.060372e-72\n\n\n2\n2iLIF\nTdh\n21.773829\n2.652163\n9.045173e-56\n1.952853e-52\n\n\n3\n2iLIF\nGrsf1\n20.289968\n2.326869\n3.291700e-51\n5.922317e-48\n\n\n4\n2iLIF\nIfitm1\n18.542225\n2.322205\n6.579498e-47\n8.355962e-44\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n87549\nKOSR_double\nPtpn22\n2.753461\n1.977904\n6.140028e-03\n4.659515e-02\n\n\n87560\nKOSR_double\nRbp2\n2.739320\n2.380432\n6.417906e-03\n4.812872e-02\n\n\n87562\nKOSR_double\nTns4\n2.736088\n2.442743\n6.487625e-03\n4.851673e-02\n\n\n87566\nKOSR_double\nHsd11b2\n2.732192\n2.305900\n6.551203e-03\n4.885682e-02\n\n\n87572\nKOSR_double\nBegain\n2.726239\n1.956147\n6.649286e-03\n4.940058e-02\n\n\n\n\n617 rows × 6 columns\n\n\n\n\nmarkers = sc.get.rank_genes_groups_df(adata, group=None).query('logfoldchanges &gt; 1 & pvals_adj &lt; 0.05')\nmarkers.to_csv(\"../results/10_Stage_markers_logfold_1_v2.csv\")\nmarkers\n\n\n\n\n\n\n\n\ngroup\nnames\nscores\nlogfoldchanges\npvals\npvals_adj\n\n\n\n\n0\n2iLIF\nMt1\n30.182755\n3.066576\n8.542602e-84\n6.147826e-80\n\n\n1\n2iLIF\nMt2\n28.141783\n3.261517\n2.455703e-76\n1.060372e-72\n\n\n2\n2iLIF\nTdh\n21.773829\n2.652163\n9.045173e-56\n1.952853e-52\n\n\n3\n2iLIF\nGrsf1\n20.289968\n2.326869\n3.291700e-51\n5.922317e-48\n\n\n4\n2iLIF\nIfitm1\n18.542225\n2.322205\n6.579498e-47\n8.355962e-44\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n87560\nKOSR_double\nRbp2\n2.739320\n2.380432\n6.417906e-03\n4.812872e-02\n\n\n87562\nKOSR_double\nTns4\n2.736088\n2.442743\n6.487625e-03\n4.851673e-02\n\n\n87566\nKOSR_double\nHsd11b2\n2.732192\n2.305900\n6.551203e-03\n4.885682e-02\n\n\n87569\nKOSR_double\nRP23-48M16.13\n2.731624\n1.498198\n6.531738e-03\n4.874533e-02\n\n\n87572\nKOSR_double\nBegain\n2.726239\n1.956147\n6.649286e-03\n4.940058e-02\n\n\n\n\n1435 rows × 6 columns\n\n\n\n\nsc.pl.rank_genes_groups_matrixplot(adata, n_genes=5, cmap='bwr')\n\nWARNING: dendrogram data not found (using key=dendrogram_Stage). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n\n\n\n\n\n\nsc.pl.correlation_matrix(adata, 'Stage', figsize=(5,3.5), show_correlation_numbers=True)\n\n\n\n\n\nadata.write(\"../data/processed/10_dataset_v2.h5ad\")"
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html",
    "href": "notebooks/10_re-preprocessing.html",
    "title": "10 - Re-running preprocessing",
    "section": "",
    "text": "This notebook is to address the reviewer’s comments in regards to missing Sox2 expression in the scRNAseq.\n%matplotlib inline\n\nimport glob\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n\n\nfrom matplotlib.pyplot import rc_context\nfrom numba.core.errors import NumbaDeprecationWarning, NumbaPendingDeprecationWarning\nimport warnings\n\n\nwarnings.simplefilter('ignore', category=NumbaDeprecationWarning)\nwarnings.simplefilter('ignore', category=NumbaPendingDeprecationWarning)"
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html#original-analysis",
    "href": "notebooks/10_re-preprocessing.html#original-analysis",
    "title": "10 - Re-running preprocessing",
    "section": "1 0. Original analysis",
    "text": "1 0. Original analysis\n\nadata_orig = sc.read(\"../data/processed/01_dataset_MLA.h5ad\")\nadata_orig.obs.seurat_clusters = adata_orig.obs.seurat_clusters.astype('category')\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/anndata/compat/__init__.py:229: FutureWarning: Moving element from .uns['neighbors']['distances'] to .obsp['distances'].\n\nThis is where adjacency matrices should go now.\n  warn(\n\n\n\nsc.pl.umap(adata_orig, color=['Stage', 'seurat_clusters', 'Phase'], ncols=3, frameon=False)\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter("
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html#original-sox2-expression-bowtie2",
    "href": "notebooks/10_re-preprocessing.html#original-sox2-expression-bowtie2",
    "title": "10 - Re-running preprocessing",
    "section": "2 1. Original Sox2 expression (bowtie2)",
    "text": "2 1. Original Sox2 expression (bowtie2)\n\noriginal = sc.concat([\n    sc.read_text(amp).T \n    for amp in glob.glob(\"../data/assays/SCR_20221006/processed/marsseq_16082023/output/umi.tab/*.txt\")\n])\n\n\nsc.pp.calculate_qc_metrics(original, inplace=True)\n\n\noriginal[:, 'Sox2'].var\n\n\n\n\n\n\n\n\nn_cells_by_counts\nmean_counts\nlog1p_mean_counts\npct_dropout_by_counts\ntotal_counts\nlog1p_total_counts\n\n\n\n\nSox2\n0\n0.0\n0.0\n100.0\n0.0\n0.0"
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html#re-aligned-starsolo",
    "href": "notebooks/10_re-preprocessing.html#re-aligned-starsolo",
    "title": "10 - Re-running preprocessing",
    "section": "3 2. Re-aligned (StarSolo)",
    "text": "3 2. Re-aligned (StarSolo)\n\nrealigned = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\n\nsc.pp.calculate_qc_metrics(realigned, inplace=True)\n\n\nrealigned[:, 'Sox2'].var\n\n\n\n\n\n\n\n\ngene_ids\nfeature_types\nn_cells_by_counts\nmean_counts\nlog1p_mean_counts\npct_dropout_by_counts\ntotal_counts\nlog1p_total_counts\n\n\n\n\nSox2\nENSMUSG00000074637.8\nGene Expression\n803\n0.996094\n0.691192\n47.721354\n1530.0\n7.333676"
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html#re-aligned-with-egfp-starsolo",
    "href": "notebooks/10_re-preprocessing.html#re-aligned-with-egfp-starsolo",
    "title": "10 - Re-running preprocessing",
    "section": "4 3. Re-aligned with eGFP (StarSolo)",
    "text": "4 3. Re-aligned with eGFP (StarSolo)\nIt could be since MARSseq is a 3’ sequencing, that most of the sequence is eGFP tag and not the SOX2 sequence itself.\nTo solve this issue, we introduce eGFP sequence to the reference and compare the SOX2 vs SOX2_eGFP alignemnt. If it’s a sequencing issue we should see “recovered” counts from eGFP pseudogene.\n\nrealigned_eGFP = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq_eGFP/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\n\nsc.pp.calculate_qc_metrics(realigned_eGFP, inplace=True)\n\n\nrealigned_eGFP[:, 'Sox2'].var\n\n\n\n\n\n\n\n\ngene_ids\nfeature_types\nn_cells_by_counts\nmean_counts\nlog1p_mean_counts\npct_dropout_by_counts\ntotal_counts\nlog1p_total_counts\n\n\n\n\nSox2\nENSMUSG00000074637.8\nGene Expression\n803\n0.996094\n0.691192\n47.721354\n1530.0\n7.333676\n\n\n\n\n\n\n\n\nsc.pp.normalize_total(realigned_eGFP)\nsc.pp.log1p(realigned_eGFP)\n\n\ndf = realigned_eGFP[:, ['Sox2', 'eGFP_Sox2_gene']].to_df()\n\nfig, ax = plt.subplots(1, 2, sharey=True, sharex=True, figsize=[8, 3], constrained_layout=True)\n_ = ax[0].hist(df['Sox2'], label='Sox2')\n_ = ax[1].hist(df['eGFP_Sox2_gene'], label='Sox2 (eGFP)', color='orange')\n\n_ = ax[0].legend()\n_ = ax[1].legend()\n\n_ = fig.supylabel('Counts')\n_ = fig.supxlabel('Normalized & log-transformed gene expression')\n\n\n\n\nWe can see that the eGFP couldn’t be detected, however the Sox2 expression has been recovered with StarSolo as already shown in Section 2."
  },
  {
    "objectID": "notebooks/10_re-preprocessing.html#downstream-re-analysis-egfp",
    "href": "notebooks/10_re-preprocessing.html#downstream-re-analysis-egfp",
    "title": "10 - Re-running preprocessing",
    "section": "5 4. Downstream re-analysis (eGFP)",
    "text": "5 4. Downstream re-analysis (eGFP)\n\nadata = sc.read_10x_mtx(\"../data/assays/SCR_20221006/processed/marsseq_eGFP/SB2/velocity/SB2.Solo.out/Gene/raw/\")\n\nmeta = pd.read_csv(\"../data/processed/00_metadata.csv\", index_col=1)\nmeta['celltag'] = meta[['Pool_barcode', 'Cell_barcode']].agg(''.join, axis=1)\nmeta = meta.reset_index().set_index('celltag')\nmeta = meta[[\n        'Well_ID', 'Well_coordinates', 'plate_ID',\n        'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode',\n        'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup',\n        'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean']]\n\ncommon_cells = adata.obs_names.intersection(meta.index)\nadata = adata[common_cells].copy()\nadata.obs = meta.loc[common_cells].copy()\n\n/tmp/ipykernel_1145483/3723844769.py:3: DtypeWarning: Columns (22,32,70,71,72,79,90,99,113,119,134,143,152,153,162,165,166,193,194,201,204,213,233,234,245,253,256,264,268,275,276,283,303,304,315,317,318,398,416,417,420,477,479,552,634,642,643,646,666,683,731,866,877,1041,1043,1062,1093,1094,1132,1134,1184,1186,1192,1254,1286,1295) have mixed types. Specify dtype option on import or set low_memory=False.\n  meta = pd.read_csv(\"../data/processed/00_metadata.csv\", index_col=1)\n\n\n\n# Remove Zero\nadata = adata[adata.obs.Stage != 'Zero'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_double'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_GFP'].copy()\nadata = adata[adata.obs.Stage != 'nEnd_cherry'].copy()\n\n# Actually 2C, keep it\n# cells_2C = ['AGTCTCGTGAG', 'CATGCATGGAT', 'CTACCAATGCG', 'CTACTCGATAC', 'TGATGAGCTAG', 'TGATTACGAGG']\n\n# Remove ERCC cells\nadata = adata[:, ~adata.var_names.str.startswith('ERCC-')]\n\n\nadata.var['mt'] = adata.var_names.str.startswith('mt-')\nadata.var['ercc'] = adata.var_names.str.startswith('ERCC-')\nadata.var['ribo'] = adata.var_names.str.startswith(('Rpl', 'Rps'))\n\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt', 'ercc', 'ribo'], percent_top=None, log1p=False, inplace=True)\n\n/tmp/ipykernel_1145483/3810762444.py:1: ImplicitModificationWarning: Trying to modify attribute `.var` of view, initializing view as actual.\n  adata.var['mt'] = adata.var_names.str.startswith('mt-')\n\n\n\nfig, ax = plt.subplots(1, 3, figsize=(20, 5))\nsns.violinplot(y=adata.obs['n_genes_by_counts'], orient='v', ax=ax[0])\nsns.violinplot(y=adata.obs['total_counts'], orient='v', ax=ax[1])\nsns.violinplot(y=adata.obs['pct_counts_mt'], orient='v', ax=ax[2])\n\n&lt;Axes: ylabel='pct_counts_mt'&gt;\n\n\n\n\n\n\nfig, ax = plt.subplots(1,3, figsize=(20, 5), sharey=True)\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[0], data=adata.obs, hue='Stage')\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[1], hue='pct_counts_mt', data=adata.obs)\nsns.scatterplot(x='total_counts', y='n_genes_by_counts', ax=ax[2], hue='pct_counts_ribo', data=adata.obs)\n\n&lt;Axes: xlabel='total_counts', ylabel='n_genes_by_counts'&gt;\n\n\n\n\n\n\nmin_cells, max_cells = 1000, 45e3\nmin_genes, max_genes = 1400, 7_500\n\np = sns.jointplot(x='total_counts', y='n_genes_by_counts', data=adata.obs, marginal_kws=dict(bins=100), height=10)\n# min\np.ax_joint.axvline(x=min_cells, color='red')\np.ax_joint.axhline(y=min_genes, color='red')\n\n# max\np.ax_joint.axvline(x=max_cells, color='green')\np.ax_joint.axhline(y=max_genes, color='green')\n\n&lt;matplotlib.lines.Line2D at 0x14857523bbe0&gt;\n\n\n\n\n\n\nprint(f'Before filtering: {adata.shape}')\n\nsc.pp.filter_cells(adata, min_genes=min_genes)\nsc.pp.filter_cells(adata, min_counts=min_cells)\nsc.pp.filter_cells(adata, max_counts=max_cells)\nsc.pp.filter_cells(adata, max_genes=max_genes)\n\nadata = adata[adata.obs.pct_counts_mt &lt; 10].copy()\n\nsc.pp.filter_genes(adata, min_cells=3)\nprint(f'After filtering: {adata.shape}')\n\nBefore filtering: (1192, 55360)\nAfter filtering: (1106, 21535)\n\n\n\nfig, ax = plt.subplots(1,4, figsize=(25, 5))\nsns.violinplot(y=adata.obs['n_genes_by_counts'], orient='v', ax=ax[0])\nsns.violinplot(y=adata.obs['total_counts'], orient='v', ax=ax[1])\nsns.violinplot(y=adata.obs['pct_counts_mt'], orient='v', ax=ax[2])\nsns.violinplot(y=adata.obs['pct_counts_ribo'], orient='v', ax=ax[3])\n\n&lt;Axes: ylabel='pct_counts_ribo'&gt;\n\n\n\n\n\n\nadata.layers['counts'] = adata.X.copy()\n\nsc.pp.normalize_total(adata)\nsc.pp.log1p(adata)\nadata.raw = adata\n\n\nsc.pp.highly_variable_genes(adata, n_top_genes=2_000)\nsc.pl.highly_variable_genes(adata)\n\n\n\n\n\nsc.pp.scale(adata)\n\n\nsc.tl.pca(adata)\nsc.pl.pca_variance_ratio(adata, log=True)\n\n\n\n\n\nsc.pp.neighbors(adata)\nsc.tl.leiden(adata)\nsc.tl.umap(adata, spread=0.2)\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n2023-09-20 21:57:59.685019: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2023-09-20 21:57:59.732656: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-09-20 21:58:01.057283: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n\n\n\n# Verify 2C cells\nsc.pl.pca(adata, color=[\"Stage\", \"leiden\", 'Zscan4d'], ncols=2, wspace=0.25)\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\n\n\n\n\n5.1 Find co-expressing genes\nWe define co-expression where Sox2 ang Gata6 have their \\(expr &gt; 1.5\\)\n\nsc.pl.scatter(adata, x='Sox2', y='Gata6', color='Stage', use_raw=True)\n\n\n\n\n\ndf = pd.DataFrame(\n    adata.raw[:, ['Sox2', 'Gata6']].X.A,\n    index=adata.obs_names,\n    columns=['Sox2', 'Gata6']\n)\n\nadata.obs['S2G6+'] = np.sum(df.values &gt; 1.5, axis=1)\nadata.obs['S2G6+'] = adata.obs['S2G6+'].astype('category')\nadata.obs['S2G6+'] = adata.obs['S2G6+'].cat.rename_categories(['None', 'Co-expressed'])\n\n\nsc.pl.umap(adata, color=['Stage', 'leiden', 'Sox2', 'Gata6', 'Pou5f1', 'S2G6+',\n                         'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean'], ncols=3, frameon=False)\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\n\n\n\n\ndf = adata.obs.groupby(['Stage', 'S2G6+']).apply(len).unstack()\ndf = df / df.sum(axis=1).values[:, np.newaxis]\ndf *= 100\n\n_ = df.plot.barh(title='% of SOX2+ and Gata6+', stacked=True)\n\n\n\n\n\nsc.pl.violin(adata, ['Sox2', 'Gata6'], groupby='Stage')\n\n\n\n\n\nsc.pl.dotplot(adata,\n              ['Zscan4d', 'Tbx3', 'Dppa3', 'Fbxo15', 'Hhex', 'Gata6', 'Pdgfra', 'Zfp42', 'Klf4', 'Fgf4', 'Otx2', 'Etv5'], \n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_dotplot.py:749: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap', 'norm' will be ignored\n  dot_ax.scatter(x, y, **kwds)\n\n\n\n\n\n\nsc.tl.rank_genes_groups(adata, groupby='Stage')\n\nWARNING: Default of the method has been changed to 't-test' from 't-test_overestim_var'\n\n\n\nmarkers = sc.get.rank_genes_groups_df(adata, group=None).query('logfoldchanges &gt; 1.5 & pvals_adj &lt; 0.05')\nmarkers.to_csv(\"../results/10_Stage_markers.csv\")\nmarkers\n\n\n\n\n\n\n\n\ngroup\nnames\nscores\nlogfoldchanges\npvals\npvals_adj\n\n\n\n\n0\n2iLIF\nMt1\n29.842491\n3.055879\n2.762787e-82\n1.983221e-78\n\n\n1\n2iLIF\nMt2\n27.943794\n3.262557\n1.542141e-75\n6.642003e-72\n\n\n2\n2iLIF\nTdh\n22.062889\n2.644737\n1.121127e-56\n2.414348e-53\n\n\n3\n2iLIF\nGrsf1\n20.800953\n2.349146\n1.078348e-52\n2.111111e-49\n\n\n5\n2iLIF\nIfitm1\n18.323133\n2.324230\n4.811035e-46\n5.291538e-43\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n87431\nKOSR_double\nHsd11b2\n2.745643\n2.324542\n6.304067e-03\n4.650842e-02\n\n\n87437\nKOSR_double\nGm42669\n2.741523\n1.620217\n6.337866e-03\n4.670977e-02\n\n\n87439\nKOSR_double\nTspan2os\n2.740377\n1.570062\n6.371209e-03\n4.688613e-02\n\n\n87444\nKOSR_double\nHavcr1\n2.730861\n1.759768\n6.529470e-03\n4.779474e-02\n\n\n87447\nKOSR_double\nPnliprp2\n2.726460\n2.042935\n6.669959e-03\n4.853088e-02\n\n\n\n\n611 rows × 6 columns\n\n\n\n\nmarkers = sc.get.rank_genes_groups_df(adata, group=None).query('logfoldchanges &gt; 1 & pvals_adj &lt; 0.05')\nmarkers.to_csv(\"../results/10_Stage_markers_logfold_1.csv\")\nmarkers\n\n\n\n\n\n\n\n\ngroup\nnames\nscores\nlogfoldchanges\npvals\npvals_adj\n\n\n\n\n0\n2iLIF\nMt1\n29.842491\n3.055879\n2.762787e-82\n1.983221e-78\n\n\n1\n2iLIF\nMt2\n27.943794\n3.262557\n1.542141e-75\n6.642003e-72\n\n\n2\n2iLIF\nTdh\n22.062889\n2.644737\n1.121127e-56\n2.414348e-53\n\n\n3\n2iLIF\nGrsf1\n20.800953\n2.349146\n1.078348e-52\n2.111111e-49\n\n\n4\n2iLIF\nYbx3\n18.359901\n1.148622\n1.114029e-47\n1.499413e-44\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n87444\nKOSR_double\nHavcr1\n2.730861\n1.759768\n6.529470e-03\n4.779474e-02\n\n\n87447\nKOSR_double\nPnliprp2\n2.726460\n2.042935\n6.669959e-03\n4.853088e-02\n\n\n87456\nKOSR_double\nLsp1\n2.716301\n1.444722\n6.836535e-03\n4.950396e-02\n\n\n87457\nKOSR_double\nArhgef28\n2.715837\n1.159179\n6.847764e-03\n4.956860e-02\n\n\n87459\nKOSR_double\nSsbp2\n2.713078\n1.135953\n6.870492e-03\n4.964590e-02\n\n\n\n\n1420 rows × 6 columns\n\n\n\n\nsc.pl.rank_genes_groups_matrixplot(adata, n_genes=5, cmap='bwr')\n\nWARNING: dendrogram data not found (using key=dendrogram_Stage). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\n\n\n\n\n\n\nsc.pl.correlation_matrix(adata, 'Stage', figsize=(5,3.5), show_correlation_numbers=True)\n\n\n\n\n\nadata.write(\"../data/processed/10_dataset.h5ad\")"
  },
  {
    "objectID": "notebooks/11_figures.html",
    "href": "notebooks/11_figures.html",
    "title": "Figures",
    "section": "",
    "text": "import scanpy as sc\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsc.settings.figdir = '../figures/'\nsc.set_figure_params(dpi=120, dpi_save = 300, format='svg', transparent=True, figsize=(6,5))\n\nsns.set_style(\"white\")\nadata = sc.read(\"../data/processed/10_dataset_v2.h5ad\")\n\nadata.uns['Stage_colors'] = [\"#4f7ba7\", \"#aa2b31\", \"#f08c26\", \"#8e5099\", \"#75b4b0\"]"
  },
  {
    "objectID": "notebooks/11_figures.html#extra",
    "href": "notebooks/11_figures.html#extra",
    "title": "Figures",
    "section": "1 Extra",
    "text": "1 Extra\n\nsc.pl.umap(adata, color=['Stage', 'leiden', 'Sox2', 'Gata6', 'Pou5f1', 'S2G6+',\n                         'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean'], ncols=3, frameon=False, save='_extra.svg')\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\nWARNING: saving figure to file ../figures/umap_extra.svg\n\n\n\n\n\n\ndf = adata.obs.groupby(['Stage', 'S2G6+']).apply(len).unstack()\ndf /= df.sum(axis=1).values[:, np.newaxis]\ndf *= 100\n\ndf.plot(kind='barh', stacked=True)\nplt.gca().legend(bbox_to_anchor=(0.99, 1.02), loc='upper left', frameon=False)\nplt.gca().spines[['right', 'top']].set_visible(False)\n_ = plt.xlabel('% of SOX2+ and Gata6+')\n_ = plt.ylabel('')"
  },
  {
    "objectID": "notebooks/11_figures.html#fig.-1",
    "href": "notebooks/11_figures.html#fig.-1",
    "title": "Figures",
    "section": "2 Fig. 1",
    "text": "2 Fig. 1\n\nsc.pl.umap(adata, color='Stage', save='_fig-1.svg')\n\nWARNING: saving figure to file ../figures/umap_fig-1.svg\n\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\n\n\n\n\nsc.pl.dotplot(adata,\n              ['Zscan4d', 'Tbx3', 'Dppa3', 'Fbxo15', 'Hhex', 'Gata6', 'Pdgfra', 'Zfp42', 'Klf4', 'Fgf4', 'Otx2', 'Etv5'], \n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var', save='fig-1.svg')\n\nWARNING: saving figure to file ../figures/dotplot_fig-1.svg\n\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_dotplot.py:749: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap', 'norm' will be ignored\n  dot_ax.scatter(x, y, **kwds)\n\n\n\n\n\n\nfrom typing import Dict, Optional, Tuple\n\n\ndef plt_violin_sig(\n    adata,\n    groupby: str,\n    gene: str,\n    pairs: list[Tuple[str, str]],\n    order: Optional[list[str]] = None,\n    colors: Optional[Dict[str, str]] = None,\n    save: Optional[str] = None\n):\n    from scipy.stats import mannwhitneyu\n    from statannotations.Annotator import Annotator\n\n    def format_pval(pval, use_asterisk=True) -&gt; str:\n        if use_asterisk is False:\n            return f\"{pval:.2e}\"\n\n        if pval &lt; 0.001:\n            return \"***\"\n        if pval &lt; 0.01:\n            return \"**\"\n        if pval &lt; 0.05:\n            return \"*\"\n\n        return \"ns\"\n\n    groups = adata.obs.groupby(groupby).groups\n    columns = groups.keys()\n    df = pd.DataFrame(\n        [adata.raw[x, gene].X.toarray().ravel() for x in groups.values()], index=columns\n    ).T\n\n    pvals = [\n        mannwhitneyu(df[a], df[b], alternative=\"two-sided\", nan_policy=\"omit\").pvalue\n        for a, b in pairs\n    ]\n    formatted_pvalues = list(map(format_pval, pvals))\n\n    params = {\"data\": df.melt(), \"x\": \"variable\", \"y\": \"value\", \"order\": order}\n    params_kwd = {\"cut\": 0, \"inner\": None}\n\n    with sns.plotting_context(\"notebook\", font_scale=1):\n        fig, ax = plt.subplots(1, 1, figsize=(10, 6))\n\n        ax = sns.violinplot(**params, palette=colors, **params_kwd)\n        sns.stripplot(**params, jitter=True, zorder=1, size=1, palette=\"dark:black\")\n\n        annotator = Annotator(\n            ax, pairs, **params, palette=colors, **params_kwd, verbose=False\n        )\n        annotator.set_custom_annotations(formatted_pvalues)\n        annotator.annotate()\n\n        plt.gca().spines[[\"right\", \"top\"]].set_visible(False)\n        _ = plt.ylabel(\"Gene expression [AU]\")\n        _ = plt.xlabel(\"\")\n        plt.title(gene, loc=\"left\")\n        \n        if save is not None:\n            plt.savefig(save)\n        \n        plt.show()\n\n\npairs = [\n    ('KOSR_double', 'EPSC_GFP'),\n    ('2iLIF', 'KOSR_double'),\n    ('KOSR_double', 'EPSC_double'),\n    ('KOSR_GFP', 'KOSR_double')\n]\norder = ['2iLIF', 'KOSR_GFP', 'KOSR_double', 'EPSC_double', 'EPSC_GFP']\ncolors = dict(zip(adata.obs.Stage.cat.categories, adata.uns['Stage_colors']))\ngenes = ['Fbxo15', 'Dppa3', 'Gata6', 'Klf4', 'Otx2', 'Fgf4', 'Etv5']\n\nfor gene in genes:\n    plt_violin_sig(adata, groupby='Stage', gene=gene, pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/{gene}-fig-1.svg')"
  },
  {
    "objectID": "notebooks/11_figures.html#supl.-2",
    "href": "notebooks/11_figures.html#supl.-2",
    "title": "Figures",
    "section": "3 Supl. 2",
    "text": "3 Supl. 2\n\nsc.pl.pca(adata, color='Stage', save='_supl-2.svg')\n\nWARNING: saving figure to file ../figures/pca_supl-2.svg\n\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\n\n\n\n\nsc.pl.umap(adata, color='leiden', save='_supl-2-leiden.svg')\n\nWARNING: saving figure to file ../figures/umap_supl-2-leiden.svg\n\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n\n\n\n\n\n\nsc.pl.pca(adata, color=['Zscan4a', 'Zscan4b', 'Zscan4c', 'Zscan4d'], ncols=2, save='_supl-2-zscans.svg')\n\nWARNING: saving figure to file ../figures/pca_supl-2-zscans.svg\n\n\n\n\n\n\nsc.pl.umap(adata, color=['Gata6', 'Zfp42', 'Sox2'], ncols=3, save='_supl-2-markers.svg')\n\nWARNING: saving figure to file ../figures/umap_supl-2-markers.svg"
  },
  {
    "objectID": "notebooks/11_figures.html#supl.-3",
    "href": "notebooks/11_figures.html#supl.-3",
    "title": "Figures",
    "section": "4 Supl. 3",
    "text": "4 Supl. 3\n\noxphos = pd.read_table(\"https://www.informatics.jax.org/go/report.txt?goID=GO:0006119&results=229&startIndex=0&sort=term&dir=\")['MGI Gene/Marker ID'].unique()\nglycolisis = pd.read_table(\"https://www.informatics.jax.org/go/report.txt?goID=GO:0006096&results=192&startIndex=0&sort=term&dir=\")['MGI Gene/Marker ID'].unique()\n\n\navg_expr = pd.DataFrame(columns=adata.var_names, index=adata.obs['Stage'].cat.categories)                                                                                                 \n\nfor clust in adata.obs.Stage.cat.categories: \n    avg_expr.loc[clust] = adata[adata.obs['Stage'].isin([clust]),:].X.mean(0)\n\n\ng = sns.clustermap(\n    avg_expr[avg_expr.columns.intersection(oxphos)].T.astype(np.float32),\n    cmap='RdBu_r',\n    vmin=-1, vmax=1, \n    yticklabels=True,\n    square=True,\n    figsize=(4, 22),\n    cbar_pos=(1.05, .2, .03, .4),\n    dendrogram_ratio=0.05\n)\n# g.ax_heatmap.set_title('Oxidative Phosphorylation (GO:0006119)')\ng.savefig(f'{sc.settings.figdir}/oxphos-supl-3.svg')\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/seaborn/matrix.py:1214: UserWarning: ``square=True`` ignored in clustermap\n  warnings.warn(msg)\n\n\n\n\n\n\n# plt.title('Glycolytic Process (GO:0006096)', pad=20)\ng = sns.clustermap(\n    avg_expr[avg_expr.columns.intersection(glycolisis)].T.astype(np.float32),\n    cmap='RdBu_r',\n    vmin=-1, vmax=1,\n    yticklabels=True,\n    square=True,\n    figsize=(4, 20),\n    cbar_pos=(1.05, .2, .03, .4),\n    dendrogram_ratio=0.05\n)\ng.savefig(f'{sc.settings.figdir}/glycolytic-supl-3.svg')\n\n/home/fdb589/projects/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/seaborn/matrix.py:1214: UserWarning: ``square=True`` ignored in clustermap\n  warnings.warn(msg)\n\n\n\n\n\n\n# Violin plots\npairs = [ ('KOSR_GFP', 'KOSR_double') ]\norder = ['KOSR_GFP', 'KOSR_double']\ncolors = dict(zip(adata.obs.Stage.cat.categories, adata.uns['Stage_colors']))\n\nsub = adata[adata.obs.Stage.isin(order)].copy()\n\nplt_violin_sig(sub, groupby='Stage', gene='Cpt1a', pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/Cpt1a-supl-3.svg')\nplt_violin_sig(sub, groupby='Stage', gene='Acaa2', pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/Acaa2-supl-3.svg')\nplt_violin_sig(sub, groupby='Stage', gene='Slc25a20', pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/Slc25a20-supl-3.svg')\nplt_violin_sig(sub, groupby='Stage', gene='Abhd4', pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/Abhd4-supl-3.svg')\nplt_violin_sig(sub, groupby='Stage', gene='Abhd17a', pairs=pairs, order=order, colors=colors, save=f'{sc.settings.figdir}/Abhd17a-supl-3.svg')"
  },
  {
    "objectID": "notebooks/11_figures.html#supl.-4",
    "href": "notebooks/11_figures.html#supl.-4",
    "title": "Figures",
    "section": "5 Supl. 4",
    "text": "5 Supl. 4\n\nimport urllib.request, json \n\ncc_url = \"https://github.com/brickmanlab/project-template/raw/master/%7B%7B%20cookiecutter.project_name%20%7D%7D/data/external/mouse_cell_cycle_genes.json\"\nwith urllib.request.urlopen(cc_url) as url:\n    cc = json.load(url)\n\nsc.tl.score_genes_cell_cycle(adata, s_genes=cc['s'], g2m_genes=cc['g2m'], use_raw=False)\n\n\ncc_composition = adata.obs.groupby(['Stage', 'phase']).apply(len).unstack().fillna(0)\ncc_composition /= cc_composition.sum(axis=1)[:, np.newaxis]\ncc_composition *= 100\n\ncc_composition.plot(kind='bar', stacked=True)\nplt.gca().legend(title='CC phase', bbox_to_anchor=(0.99, 1.02), loc='upper left', frameon=False)\nplt.gca().spines[['right', 'top']].set_visible(False)\n_ = plt.xticks(rotation=45, ha='right')\n_ = plt.ylabel('% Cell cycle')\n_ = plt.xlabel('')\nplt.savefig(f\"{sc.settings.figdir}/cc-supl-4.svg\")\n\n/tmp/ipykernel_3468813/1535968803.py:2: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.\n  cc_composition /= cc_composition.sum(axis=1)[:, np.newaxis]\n\n\n\n\n\n\nsc.metrics.confusion_matrix(\"Stage\", \"leiden\", adata.obs)\n\n\n\n\n\n\n\nleiden\n0\n1\n2\n3\n\n\nStage\n\n\n\n\n\n\n\n\n2iLIF\n0.000000\n0.006135\n0.000000\n0.993865\n\n\nEPSC_GFP\n0.007042\n0.992958\n0.000000\n0.000000\n\n\nEPSC_double\n0.348624\n0.651376\n0.000000\n0.000000\n\n\nKOSR_GFP\n0.043796\n0.000000\n0.934307\n0.021898\n\n\nKOSR_double\n0.837838\n0.008108\n0.151351\n0.002703"
  },
  {
    "objectID": "notebooks/11_figures.html#other",
    "href": "notebooks/11_figures.html#other",
    "title": "Figures",
    "section": "6 Other",
    "text": "6 Other\n\nmarkers = [\n    \"Mt2\", \"Tdh\", \"Trh\", \"Epcam\", \"Pdgfa\", \"Lin28a\", \"Bcat2\", \"Etv6\", \"Stat3\", \"Klf6\",\n    \"Lef1\", \"Dppa3\", \"Id1\", \"Klf15\", \"Sox11\", \"Dusp1\", \"Wnt3\", \"Gata2\", \"Cdh2\", \"Cldn4\",\n    \"Tead3\", \"Igf2bp2\", \"Fgf4\", \"Nr0b1\", \"Sox12\", \"Slc7a3\", \"Eras\", \"Sox15\", \"Pou6f1\",\n    \"Fbp1\", \"Utf1\", \"Sirt2\", \"Myc\", \"Spry4\", \"Tagln\", \"Dppa2\", \"Dppa4\", \"Dnmt3l\", \"Gata6\",\n    \"Fbp2\", \"Dab2\", \"Spry2\", \"Afp\", \"Pdgfra\", \"Eomes\", \"Fgf10\", \"Krt7\", \"Stat5a\", \"Gata3\",\n    \"Fgfr4\"]\n\n\nsc.pl.dotplot(adata, markers,\n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n\nsc.pl.matrixplot(adata, markers, dendrogram=True,\n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n\nmarkers = [\n    \"Mt2\", \"Tdh\", \"Trh\", \"Pdgfa\", \"Lin28a\", \"Stat3\", \"Lef1\", \"Dppa3\", \"Id1\",\n    \"Sox11\", \"Cldn4\", \"Igf2bp2\", \"Fgf4\", \"Nr0b1\", \"Slc7a3\", \"Eras\", \"Tcl1\",\n    \"Vegfa\", \"Pbx1\", \"Sox15\", \"Pou6f1\", \"Fbp1\", \"Tgfbr3\", \"Nid1\", \"Map2k6\",\n    \"Ttll1\", \"Utf1\", \"Myc\", \"Spry4\", \"Tagln\", \"Dusp5\", \"Foxa2\", \"Dppa2\",\n    \"Dppa4\", \"Dnmt3l\", \"Gata6\", \"Fbp2\", \"Dab2\", \"Spry2\", \"Afp\", \"Pdgfra\", \"Stat5a\"\n]\n\n\nsc.pl.dotplot(adata, markers,\n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n\nsc.pl.matrixplot(adata, markers, dendrogram=True,\n              categories_order=['EPSC_GFP', 'EPSC_double', 'KOSR_double', 'KOSR_GFP', '2iLIF'],\n              groupby='Stage', standard_scale='var')\n\n\nmarkers = {\n    \"2iLIF\": [\"Lin28a\", \"Stat3\", \"Lef1\", \"Dppa3\", \"Id1\"],\n    \"EPSC_GFP\" : [\"Igf2bp2\", \"Fgf4\", \"Nr0b1\", \"Slc7a3\", \"Eras\"],\n    \"EPSC_double\": [\"Sox15\", \"Fbp1\", \"Map2k6\", \"Ttll1\", \"Nid1\"],\n    \"KOSR_GFP\": [\"Utf1\", \"Myc\", \"Spry4\", \"Tagln\", \"Dusp5\"],\n    \"KOSR_double\": [\"Dppa2\", \"Dnmt3l\", \"Gata6\", \"Dab2\", \"Spry2\"]\n}\n\n\nsc.pl.dotplot(adata, markers,\n              categories_order=['2iLIF', 'EPSC_double', 'EPSC_GFP', 'KOSR_double', 'KOSR_GFP'],\n              groupby='Stage', standard_scale='var')\n\n\nsc.pl.matrixplot(adata, markers, dendrogram=True,\n              categories_order=['2iLIF', 'EPSC_double', 'EPSC_GFP', 'KOSR_double', 'KOSR_GFP'],\n              groupby='Stage', standard_scale='var')"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html",
    "href": "notebooks/21_Alba_data_integration.html",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "",
    "text": "25-09-2023\nIntegration of the dataset without TE\n21-09-2023\nAnalysis with STARsolo based quantification\n\nimport pandas as pd\nimport scanpy as sc\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom rich import print\n\n\nimport warnings\n# from lightning_fabric.plugins.environments.slurm import PossibleUserWarning\n# warnings.simplefilter(action='ignore', category=PossibleUserWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\nsc.settings.figdir = '../figures/'\nsc.set_figure_params(dpi=120, dpi_save = 300, format='svg', transparent=True, figsize=(6,5))\n\nsns.set_style(\"white\")\n\n%config InlineBackend.print_figure_kwargs={'facecolor' : \"w\"}\n%config InlineBackend.figure_format='retina'"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html#load-in-experimental-single-cell-rna-seq-data",
    "href": "notebooks/21_Alba_data_integration.html#load-in-experimental-single-cell-rna-seq-data",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "1.1 Load in experimental single cell RNA-seq data",
    "text": "1.1 Load in experimental single cell RNA-seq data\n\nalba_adata = sc.read('../data/processed/10_dataset_v2.h5ad')\n\n\nsc.pl.umap(alba_adata, color=['Stage', 'leiden', 'Sox2', 'Gata6', 'Pou5f1', 'S2G6+',\n                         'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean'], ncols=3, frameon=False)\n\n\n\n\n\nalba_adata\n\nAnnData object with n_obs × n_vars = 1139 × 21590\n    obs: 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'n_genes', 'n_counts', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'gene_ids', 'feature_types', 'mt', 'ercc', 'ribo', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n    uns: 'Amp_batch_ID_colors', 'S2G6+_colors', 'Stage_colors', 'dendrogram_Stage', 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'plate_ID_colors', 'rank_genes_groups', 'umap'\n    obsm: 'X_pca', 'X_umap'\n    varm: 'PCs'\n    layers: 'counts'\n    obsp: 'connectivities', 'distances'"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html#load-and-preprocess-the-nowotschin-dataset",
    "href": "notebooks/21_Alba_data_integration.html#load-and-preprocess-the-nowotschin-dataset",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "1.2 Load and preprocess the Nowotschin dataset",
    "text": "1.2 Load and preprocess the Nowotschin dataset\n\nnowo = sc.read(\"../data/external/Nowotschin_et_al_2019/sc_endoderm_all_cells.h5ad\")\nmeta = pd.read_csv(\"../data/external/Nowotschin_et_al_2019/e35_cell_types.csv\", index_col=0)\nnowo.obs.loc[meta.index, 'CellType'] = meta.CellType\nnowo = nowo[\n    nowo.obs.Timepoint.isin(['E3.5', 'E4.5'])\n].copy()\nnowo.obs['batch'] = \"NOWO_1\"\nnowo.obs['experiment'] = \"Nowotschin et al., 2019\"\nnowo.obs['technology'] = \"10X 3' v2\"\nnowo.obs['ct'] = nowo.obs[['Timepoint', 'CellType']].agg('-'.join, axis=1)\nnowo.obs['ct_orig'] = nowo.obs.CellType\nnowo.obs = nowo.obs[['batch', 'experiment', 'technology', 'ct', 'ct_orig']]\nnowo.var_names = nowo.var_names.str.lower()\n\nsc.pp.filter_cells(nowo, min_counts=10)\nsc.pp.filter_cells(nowo, min_genes=10)\n\nnowo.layers[\"counts\"] = nowo.X.copy()\n\nsc.pp.normalize_total(nowo, target_sum=10_000)\nsc.pp.log1p(nowo)\nnowo.raw = nowo\n\n\nsc.pp.highly_variable_genes(\n    nowo,\n    flavor=\"seurat_v3\",\n    n_top_genes=1_000,\n    layer=\"counts\",\n    batch_key=\"batch\",\n    min_mean=0.0125, max_mean=10, min_disp=0.5,\n    subset=True,\n)\n\nsc.pp.pca(nowo)\nsc.pp.neighbors(nowo)\nsc.tl.umap(nowo)\n\n/projects/dan1/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/umap/distances.py:1063: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/projects/dan1/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/umap/distances.py:1071: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/projects/dan1/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/umap/distances.py:1086: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/projects/dan1/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n/projects/dan1/data/Brickman/conda/envs/scvi-1.0.0/lib/python3.10/site-packages/umap/umap_.py:660: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n2023-10-23 16:33:03.432403: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n2023-10-23 16:33:03.482766: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\nTo enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-10-23 16:33:04.693881: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n\n\n\n1.2.1 Sanity plots for Nowotschin dataset\n\nsc.pl.umap(\n    nowo,\n    color=[\"ct\"],\n    frameon=False,\n    ncols=1,\n    save=\"_integration_01_Nowotschin_only-with_TE-UMAP.svg\"\n)\n\nWARNING: saving figure to file ../figures/umap_integration_01_Nowotschin_only-with_TE-UMAP.svg\n\n\n\n\n\n\nsc.pl.pca(\n    nowo,\n    color=[\"ct\"],\n    frameon=False,\n    ncols=1,\n    dimensions=[(0, 1)],\n    save=\"_integration_02_Nowotschin_only-with_TE-PCA.svg\"\n)\n\nWARNING: saving figure to file ../figures/pca_integration_02_Nowotschin_only-with_TE-PCA.svg\n\n\n\n\n\n\nnowo = nowo[:, nowo.var.highly_variable].copy()\nsc.pp.scale(nowo, max_value=10)\n\n\n\n1.2.2 Map experimental dataset onto altas (Nowotschin) dataset\n\nnowo.var_names = nowo.var_names.str.upper()\nalba_adata.var_names = alba_adata.var_names.str.upper()\nvar_names = nowo.var_names.intersection(alba_adata.var_names)\nnowo = nowo[:, var_names].copy()\nalba_adata = alba_adata[:, var_names].copy()\n\n\nsc.tl.ingest(alba_adata, nowo, obs = 'ct')\n\n\nadata_concat = nowo.concatenate(alba_adata, batch_categories=['nowo', 'alba'])\n\n\nadata_concat\n\nAnnData object with n_obs × n_vars = 2145 × 919\n    obs: 'batch', 'experiment', 'technology', 'ct', 'ct_orig', 'n_counts', 'n_genes', 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'highly_variable-alba', 'means-alba', 'highly_variable_nbatches-alba', 'mean-alba', 'std-alba', 'gene_ids-alba', 'feature_types-alba', 'mt-alba', 'ercc-alba', 'ribo-alba', 'n_cells_by_counts-alba', 'mean_counts-alba', 'pct_dropout_by_counts-alba', 'total_counts-alba', 'n_cells-alba', 'dispersions-alba', 'dispersions_norm-alba', 'highly_variable_intersection-alba', 'highly_variable-nowo', 'highly_variable_rank-nowo', 'means-nowo', 'variances-nowo', 'variances_norm-nowo', 'highly_variable_nbatches-nowo', 'mean-nowo', 'std-nowo'\n    obsm: 'X_pca', 'X_umap'\n    layers: 'counts'\n\n\n\nalba_annotated = adata_concat[adata_concat.obs.batch == 'alba']\n\n\nalba_annotated\n\nView of AnnData object with n_obs × n_vars = 1139 × 919\n    obs: 'batch', 'experiment', 'technology', 'ct', 'ct_orig', 'n_counts', 'n_genes', 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'highly_variable-alba', 'means-alba', 'highly_variable_nbatches-alba', 'mean-alba', 'std-alba', 'gene_ids-alba', 'feature_types-alba', 'mt-alba', 'ercc-alba', 'ribo-alba', 'n_cells_by_counts-alba', 'mean_counts-alba', 'pct_dropout_by_counts-alba', 'total_counts-alba', 'n_cells-alba', 'dispersions-alba', 'dispersions_norm-alba', 'highly_variable_intersection-alba', 'highly_variable-nowo', 'highly_variable_rank-nowo', 'means-nowo', 'variances-nowo', 'variances_norm-nowo', 'highly_variable_nbatches-nowo', 'mean-nowo', 'std-nowo'\n    obsm: 'X_pca', 'X_umap'\n    layers: 'counts'\n\n\n\npd.crosstab(alba_annotated.obs.Stage, alba_annotated.obs.ct)\n\n\n\n\n\n\n\nct\nE3.5-EPI\nE3.5-ICM\nE3.5-PrE\nE3.5-TE\nE4.5-EPI\nE4.5-PrE\nE4.5-TE\n\n\nStage\n\n\n\n\n\n\n\n\n\n\n\n2iLIF\n90\n12\n45\n10\n2\n1\n3\n\n\nEPSC_GFP\n90\n5\n47\n0\n0\n0\n0\n\n\nEPSC_double\n87\n64\n173\n2\n0\n1\n0\n\n\nKOSR_GFP\n62\n7\n63\n2\n2\n0\n1\n\n\nKOSR_double\n75\n55\n232\n7\n1\n0\n0\n\n\n\n\n\n\n\n\npd.crosstab(alba_adata.obs.Stage, alba_adata.obs.leiden)\n\n\n\n\n\n\n\nleiden\n0\n1\n2\n3\n\n\nStage\n\n\n\n\n\n\n\n\n2iLIF\n0\n1\n0\n162\n\n\nEPSC_GFP\n1\n141\n0\n0\n\n\nEPSC_double\n114\n213\n0\n0\n\n\nKOSR_GFP\n6\n0\n128\n3\n\n\nKOSR_double\n310\n3\n56\n1\n\n\n\n\n\n\n\n\nax = sns.heatmap(sc.metrics.confusion_matrix(\"Stage\", \"leiden\", alba_annotated.obs), cmap=sns.dark_palette(\"white\", reverse=True, as_cmap=True),linewidth=.5)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/crosstab_01_Stage_vs_Leiden_cluster.svg')\n\n\n\n\n\nalba_annotated.obs.Stage.value_counts()\n\nKOSR_double    370\nEPSC_double    327\n2iLIF          163\nEPSC_GFP       142\nKOSR_GFP       137\nName: Stage, dtype: int64\n\n\n\nalba_annotated_df=pd.DataFrame({\n    'condition':alba_annotated.obs.Stage,\n    'annotation':alba_annotated.obs.ct,\n})\n\n\nproportions_df = pd.crosstab(alba_annotated.obs.Stage,alba_annotated.obs.ct, normalize='index')\n\n\nproportions_df_notNorm = pd.crosstab(alba_annotated.obs.Stage,alba_annotated.obs.ct)\n\n\nax = proportions_df.plot.barh(\n    stacked=True,\n    grid=False,\n    )\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_03_CellProportions_Integrated_with-TE.svg')\n\n\n\n\n\nproportions_of_clusters_df = pd.crosstab(alba_annotated.obs.leiden, alba_annotated.obs.ct, normalize='index')\nproportions_of_clusters_df_notNorm = pd.crosstab(alba_annotated.obs.leiden, alba_annotated.obs.ct)\n\n\nax = proportions_of_clusters_df.plot.barh(\n    stacked=True,\n    grid=False,\n    )\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_04_CellProportionsLeidenClusters_Integrated_with-TE.svg')"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html#contingency-table-analysis",
    "href": "notebooks/21_Alba_data_integration.html#contingency-table-analysis",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "1.3 Contingency table analysis",
    "text": "1.3 Contingency table analysis\n\nimport scipy.stats as stats\n\n\nstats.chi2_contingency(proportions_df_notNorm)\n\nChi2ContingencyResult(statistic=201.78632492668822, pvalue=4.715612624607903e-30, dof=24, expected_freq=array([[ 57.81562774,  20.46444249,  80.1404741 ,   3.00526778,\n          0.71553995,   0.28621598,   0.57243196],\n       [ 50.36698859,  17.82791923,  69.81562774,   2.61808604,\n          0.62335382,   0.24934153,   0.49868306],\n       [115.98595259,  41.05443371, 160.77260755,   6.02897278,\n          1.43546971,   0.57418788,   1.14837577],\n       [ 48.59350307,  17.20017559,  67.35733099,   2.52589991,\n          0.60140474,   0.2405619 ,   0.48112379],\n       [131.23792801,  46.45302897, 181.91395961,   6.82177349,\n          1.62423178,   0.64969271,   1.29938543]]))\n\n\n\nalba_chi2 = stats.chi2_contingency(proportions_df_notNorm)\n\n\nalba_chi2\n\nChi2ContingencyResult(statistic=201.78632492668822, pvalue=4.715612624607903e-30, dof=24, expected_freq=array([[ 57.81562774,  20.46444249,  80.1404741 ,   3.00526778,\n          0.71553995,   0.28621598,   0.57243196],\n       [ 50.36698859,  17.82791923,  69.81562774,   2.61808604,\n          0.62335382,   0.24934153,   0.49868306],\n       [115.98595259,  41.05443371, 160.77260755,   6.02897278,\n          1.43546971,   0.57418788,   1.14837577],\n       [ 48.59350307,  17.20017559,  67.35733099,   2.52589991,\n          0.60140474,   0.2405619 ,   0.48112379],\n       [131.23792801,  46.45302897, 181.91395961,   6.82177349,\n          1.62423178,   0.64969271,   1.29938543]]))\n\n\n\nalba_chi2.pvalue\n\n4.715612624607903e-30\n\n\n\nalba_chi2.statistic\n\n201.78632492668822\n\n\n\n# https://stackoverflow.com/questions/20453729/what-is-the-equivalent-of-r-data-chisqresiduals-in-python\nfrom scipy.stats.contingency import margins\n\ndef residuals(observed, expected):\n    return (observed - expected) / np.sqrt(expected)\n\ndef stdres(observed, expected):\n    n = observed.sum()\n    rsum, csum = margins(observed)\n    # With integers, the calculation\n    #     csum * rsum * (n - rsum) * (n - csum)\n    # might overflow, so convert rsum and csum to floating point.\n    rsum = rsum.astype(np.float64)\n    csum = csum.astype(np.float64)\n    v = csum * rsum * (n - rsum) * (n - csum) / n**3\n    return (observed - expected) / np.sqrt(v)\n\n\nsns.set_style(\"dark\")\n\n\nax = sns.heatmap(\n    pd.DataFrame(stdres(proportions_df_notNorm.to_numpy(), alba_chi2.expected_freq), columns= proportions_df_notNorm.columns, index=proportions_df_notNorm.index),\n    cmap='bwr'\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_05_ChiSquared_NormalisedResiduals-withTE.svg')\n\n\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(residuals(proportions_df_notNorm.to_numpy(), alba_chi2.expected_freq), columns= proportions_df_notNorm.columns, index=proportions_df_notNorm.index),\n    cmap='bwr'\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_06_ChiSquared_RawResiduals-withTE.svg')\n\n\n\n\n\n1.3.1 Significance tests using clusters\n\nstats.chi2_contingency(proportions_of_clusters_df_notNorm)\n\nChi2ContingencyResult(statistic=196.4951224929756, pvalue=5.025159340654328e-32, dof=18, expected_freq=array([[152.87445127,  54.11150132, 211.90517998,   7.94644425,\n          1.89201054,   0.75680421,   1.51360843],\n       [126.98156277,  44.94644425, 176.01404741,   6.60052678,\n          1.57155399,   0.6286216 ,   1.2572432 ],\n       [ 65.2642669 ,  23.10096576,  90.46532046,   3.39244952,\n          0.80772608,   0.32309043,   0.64618086],\n       [ 58.87971905,  20.84108867,  81.61545215,   3.06057946,\n          0.72870939,   0.29148376,   0.58296752]]))\n\n\n\nseurat_clusters_chi2 = stats.chi2_contingency(proportions_of_clusters_df_notNorm)\n\n\nseurat_clusters_chi2.pvalue\n\n5.025159340654328e-32\n\n\n\nseurat_clusters_chi2.statistic\n\n196.4951224929756\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(stdres(proportions_of_clusters_df_notNorm.to_numpy(), seurat_clusters_chi2.expected_freq), columns= proportions_of_clusters_df_notNorm.columns, index=proportions_of_clusters_df_notNorm.index),\n    cmap='bwr', center = 0.0\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_07_LeidenClusters_ChiSquared_NormalisedResiduals-withTE.svg')\n\n\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(residuals(proportions_of_clusters_df_notNorm.to_numpy(), seurat_clusters_chi2.expected_freq), columns= proportions_of_clusters_df_notNorm.columns, index=proportions_of_clusters_df_notNorm.index),\n    cmap='bwr', center = 0.0\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_08_LeidenClusters_ChiSquared_RawResiduals-withTE.svg')\n\n\n\n\n\nsc.pl.pca(adata_concat,\n    color=['batch', 'ct', 'Stage', 'leiden'],\n    frameon=False,\n    ncols=1,)\n\n\n\n\n\nsc.pl.umap(adata_concat,\n    color=['batch', 'ct', 'Stage'],\n    ncols = 1,\n    frameon=False,\n    save=\"_integration_09_UMAP_integrated_withTE.svg\",\n )\n\nWARNING: saving figure to file ../figures/umap_integration_09_UMAP_integrated_withTE.svg\n\n\n\n\n\n\nsc.pl.pca(adata_concat,\n    color=['batch', 'ct', 'Stage'],\n    frameon=False,\n    ncols=1,\n    save=\"_integration_10_PCA_integrated_withTE.svg\",\n)\n\nWARNING: saving figure to file ../figures/pca_integration_10_PCA_integrated_withTE.svg"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html#load-in-experimental-single-cell-rna-seq-data-1",
    "href": "notebooks/21_Alba_data_integration.html#load-in-experimental-single-cell-rna-seq-data-1",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "2.1 Load in experimental single cell RNA-seq data",
    "text": "2.1 Load in experimental single cell RNA-seq data\n\nalba_adata = sc.read('../data/processed/10_dataset_v2.h5ad')\n\n\nalba_adata\n\nAnnData object with n_obs × n_vars = 1139 × 21590\n    obs: 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'n_genes', 'n_counts', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'gene_ids', 'feature_types', 'mt', 'ercc', 'ribo', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection', 'mean', 'std'\n    uns: 'Amp_batch_ID_colors', 'S2G6+_colors', 'Stage_colors', 'dendrogram_Stage', 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'plate_ID_colors', 'rank_genes_groups', 'umap'\n    obsm: 'X_pca', 'X_umap'\n    varm: 'PCs'\n    layers: 'counts'\n    obsp: 'connectivities', 'distances'\n\n\n\n2.1.1 Map experimental data onto filtered atlas\n\nnowo.var_names = nowo.var_names.str.upper()\nalba_adata.var_names = alba_adata.var_names.str.upper()\nvar_names = nowo.var_names.intersection(alba_adata.var_names)\nnowo = nowo[:, var_names].copy()\nalba_adata = alba_adata[:, var_names].copy()\n\n\nsc.tl.ingest(alba_adata, nowo, obs = 'ct')\n\n\nadata_concat = nowo.concatenate(alba_adata, batch_categories=['nowo', 'alba'])\n\n\nadata_concat\n\nAnnData object with n_obs × n_vars = 2041 × 917\n    obs: 'batch', 'experiment', 'technology', 'ct', 'ct_orig', 'n_counts', 'n_genes', 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'highly_variable-alba', 'means-alba', 'highly_variable_nbatches-alba', 'mean-alba', 'std-alba', 'gene_ids-alba', 'feature_types-alba', 'mt-alba', 'ercc-alba', 'ribo-alba', 'n_cells_by_counts-alba', 'mean_counts-alba', 'pct_dropout_by_counts-alba', 'total_counts-alba', 'n_cells-alba', 'dispersions-alba', 'dispersions_norm-alba', 'highly_variable_intersection-alba', 'highly_variable-nowo', 'highly_variable_rank-nowo', 'means-nowo', 'variances-nowo', 'variances_norm-nowo', 'highly_variable_nbatches-nowo', 'mean-nowo', 'std-nowo'\n    obsm: 'X_pca', 'X_umap'\n    layers: 'counts'\n\n\n\nalba_annotated = adata_concat[adata_concat.obs.batch == 'alba']\n\n\nalba_annotated\n\nView of AnnData object with n_obs × n_vars = 1139 × 917\n    obs: 'batch', 'experiment', 'technology', 'ct', 'ct_orig', 'n_counts', 'n_genes', 'Well_ID', 'Well_coordinates', 'plate_ID', 'Subject_ID', 'Amp_batch_ID', 'Cell_barcode', 'Pool_barcode', 'Batch', 'Condition', 'SampleName', 'Stage', 'Source', 'SubGroup', 'Group', 'Clone', 'All.Events.GFP-A.Geo.Mean', 'All.Events.561D-A.Geo.Mean', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'total_counts_ercc', 'pct_counts_ercc', 'total_counts_ribo', 'pct_counts_ribo', 'leiden', 'S_score', 'G2M_score', 'phase', 'S2G6+'\n    var: 'highly_variable-alba', 'means-alba', 'highly_variable_nbatches-alba', 'mean-alba', 'std-alba', 'gene_ids-alba', 'feature_types-alba', 'mt-alba', 'ercc-alba', 'ribo-alba', 'n_cells_by_counts-alba', 'mean_counts-alba', 'pct_dropout_by_counts-alba', 'total_counts-alba', 'n_cells-alba', 'dispersions-alba', 'dispersions_norm-alba', 'highly_variable_intersection-alba', 'highly_variable-nowo', 'highly_variable_rank-nowo', 'means-nowo', 'variances-nowo', 'variances_norm-nowo', 'highly_variable_nbatches-nowo', 'mean-nowo', 'std-nowo'\n    obsm: 'X_pca', 'X_umap'\n    layers: 'counts'\n\n\n\npd.crosstab(alba_annotated.obs.Stage, alba_annotated.obs.ct)\n\n\n\n\n\n\n\nct\nE3.5-EPI\nE3.5-ICM\nE3.5-PrE\nE4.5-EPI\nE4.5-PrE\n\n\nStage\n\n\n\n\n\n\n\n\n\n2iLIF\n93\n12\n54\n3\n1\n\n\nEPSC_GFP\n87\n7\n47\n0\n1\n\n\nEPSC_double\n89\n48\n189\n0\n1\n\n\nKOSR_GFP\n64\n4\n65\n4\n0\n\n\nKOSR_double\n75\n46\n248\n1\n0\n\n\n\n\n\n\n\n\nalba_annotated.obs.Stage.value_counts()\n\nKOSR_double    370\nEPSC_double    327\n2iLIF          163\nEPSC_GFP       142\nKOSR_GFP       137\nName: Stage, dtype: int64\n\n\n\nalba_annotated_df=pd.DataFrame({\n    'condition':alba_annotated.obs.Stage,\n    'annotation':alba_annotated.obs.ct,\n})\n\n\nproportions_df = pd.crosstab(alba_annotated.obs.Stage,alba_annotated.obs.ct, normalize='index')\n\n\nproportions_df_notNorm = pd.crosstab(alba_annotated.obs.Stage,alba_annotated.obs.ct)\n\n\nax = proportions_df.plot.barh(\n    stacked=True,\n    grid=False,\n    )\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_11_CellProportions_Integrated_without-TE.svg')\n\n\n\n\n\nproportions_of_clusters_df = pd.crosstab(alba_annotated.obs.leiden, alba_annotated.obs.ct, normalize='index')\nproportions_of_clusters_df_notNorm = pd.crosstab(alba_annotated.obs.leiden, alba_annotated.obs.ct)\n\n\nax = proportions_of_clusters_df.plot.barh(\n    stacked=True,\n    grid=False,\n    )\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_12_CellProportionsLeidenClusters_Integrated_without-TE.svg')"
  },
  {
    "objectID": "notebooks/21_Alba_data_integration.html#contingency-table-analysis-1",
    "href": "notebooks/21_Alba_data_integration.html#contingency-table-analysis-1",
    "title": "Atlas mapping for Redó-Riveiro et al. 2023",
    "section": "2.2 Contingency table analysis",
    "text": "2.2 Contingency table analysis\n\nimport scipy.stats as stats\n\n\nstats.chi2_contingency(proportions_df_notNorm)\n\nChi2ContingencyResult(statistic=161.6138042752549, pvalue=3.931212702862735e-26, dof=16, expected_freq=array([[ 58.3880597 ,  16.74363477,  86.29411765,   1.14486392,\n          0.42932397],\n       [ 50.86567164,  14.58647937,  75.17647059,   0.99736611,\n          0.37401229],\n       [117.13432836,  33.58999122, 173.11764706,   2.29675154,\n          0.86128183],\n       [ 49.07462687,  14.07287094,  72.52941176,   0.96224759,\n          0.36084284],\n       [132.53731343,  38.00702371, 195.88235294,   2.59877085,\n          0.97453907]]))\n\n\n\nalba_chi2 = stats.chi2_contingency(proportions_df_notNorm)\n\n\nalba_chi2.pvalue\n\n3.931212702862735e-26\n\n\n\nalba_chi2.statistic\n\n161.6138042752549\n\n\n\n# https://stackoverflow.com/questions/20453729/what-is-the-equivalent-of-r-data-chisqresiduals-in-python\nfrom scipy.stats.contingency import margins\n\ndef residuals(observed, expected):\n    return (observed - expected) / np.sqrt(expected)\n\ndef stdres(observed, expected):\n    n = observed.sum()\n    rsum, csum = margins(observed)\n    # With integers, the calculation\n    #     csum * rsum * (n - rsum) * (n - csum)\n    # might overflow, so convert rsum and csum to floating point.\n    rsum = rsum.astype(np.float64)\n    csum = csum.astype(np.float64)\n    v = csum * rsum * (n - rsum) * (n - csum) / n**3\n    return (observed - expected) / np.sqrt(v)\n\n\nax = sns.heatmap(\n    pd.DataFrame(stdres(proportions_df_notNorm.to_numpy(), alba_chi2.expected_freq), columns= proportions_df_notNorm.columns, index=proportions_df_notNorm.index),\n    cmap='bwr'\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_13_ChiSquared_NormalisedResiduals-withoutTE.svg')\n\n\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(residuals(proportions_df_notNorm.to_numpy(), alba_chi2.expected_freq), columns= proportions_df_notNorm.columns, index=proportions_df_notNorm.index),\n    cmap='bwr'\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_14_ChiSquared_RawResiduals-withoutTE.svg')\n\n\n\n\n\n2.2.1 Significance tests using clusters\n\nstats.chi2_contingency(proportions_of_clusters_df_notNorm)\n\nChi2ContingencyResult(statistic=144.80555129331256, pvalue=6.398572999546904e-25, dof=12, expected_freq=array([[154.3880597 ,  44.27304653, 228.17647059,   3.02721686,\n          1.13520632],\n       [128.23880597,  36.77436348, 189.52941176,   2.51448639,\n          0.9429324 ],\n       [ 65.91044776,  18.90079017,  97.41176471,   1.29236172,\n          0.48463565],\n       [ 59.46268657,  17.05179982,  87.88235294,   1.16593503,\n          0.43722564]]))\n\n\n\nseurat_clusters_chi2 = stats.chi2_contingency(proportions_of_clusters_df_notNorm)\n\n\nseurat_clusters_chi2.pvalue\n\n6.398572999546904e-25\n\n\n\nseurat_clusters_chi2.statistic\n\n144.80555129331256\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(stdres(proportions_of_clusters_df_notNorm.to_numpy(), seurat_clusters_chi2.expected_freq), columns= proportions_of_clusters_df_notNorm.columns, index=proportions_of_clusters_df_notNorm.index),\n    cmap='bwr', center = 0.0\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_15_LeidenClusters_ChiSquared_NormalisedResiduals-withoutTE.svg')\n\n\n\n\n\nax = sns.heatmap(\n    pd.DataFrame(residuals(proportions_of_clusters_df_notNorm.to_numpy(), seurat_clusters_chi2.expected_freq), columns= proportions_of_clusters_df_notNorm.columns, index=proportions_of_clusters_df_notNorm.index),\n    cmap='bwr', center = 0.0\n)\nfig = ax.get_figure()\nfig.savefig(f'{sc.settings.figdir}/integration_16_LeidenClusters_ChiSquared_RawResiduals-withoutTE.svg')\n\n\n\n\n\nsc.pl.pca(adata_concat,\n    color=['batch', 'ct', 'Stage', 'leiden'],\n    frameon=False,\n    ncols=1,)\n\n\n\n\n\nsc.pl.umap(adata_concat,\n    color=['batch', 'ct', 'Stage'],\n    ncols = 1,\n    frameon=False,\n    save=\"_integration_17_UMAP_integrated_withoutTE.svg\",\n )\n\nWARNING: saving figure to file ../figures/umap_integration_17_UMAP_integrated_withoutTE.svg\n\n\n\n\n\n\nsc.pl.pca(adata_concat,\n    color=['batch', 'ct', 'Stage'],\n    frameon=False,\n    ncols=1,\n    save=\"_integration_18_PCA_integrated_withoutTE.svg\",\n)\n\nWARNING: saving figure to file ../figures/pca_integration_18_PCA_integrated_withoutTE.svg"
  }
]